# This is a basic workflow to help you get started with Actions

name: Webapp Distribution

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SERVICE_NAME: "webapp"
  DOCKER_USERNAME: "benjitusk"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-service:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Add secrets to config file
      - name: Inject Secrets
        run: |
          cd Yeshivat\ Torat\ Shraga/Code/Webapp
          echo -E '${{ secrets.FIREBASE_CREDENTIALS }}' > cred.json
          echo username = \'${{ secrets.WEB_USERNAME }}\' >> settings.py
          echo password = \'${{ secrets.WEB_PASSWORD }}\' >> settings.py

      - name: Build Vars
        id: vars
        run: |
          echo "::set-output name=image::${{ env.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:$GITHUB_SHA"
          echo "::set-output name=latest::${{ env.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest"

      - name: Build Docker Image
        run: |
          cd Yeshivat\ Torat\ Shraga/Code/Webapp
          docker build -t ${{ steps.vars.outputs.image }} -t ${{ steps.vars.outputs.latest }} .
        
      - name: Login to DockerHub
        run: |
          echo "Authenticating docker.io"
          echo ${{ secrets.DOCKER_TOKEN }} | docker login --username=${{ env.DOCKER_USERNAME }} --password-stdin
          
      - name: Push to DockerHub
        run: |
          docker push ${{ steps.vars.outputs.image }}
          docker push ${{ steps.vars.outputs.latest }}

    outputs:
      image: ${{ steps.vars.outputs.image }}
      latest: ${{ steps.vars.outputs.latest }}


  deploy-service-production:
    needs: [build-service]
    runs-on: ubuntu-latest
    steps:
      - name: prereqs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'eu-central-1'
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION
          aws configure set region $AWS_DEFAULT_REGION
          cat ~/.aws/credentials
      - name: Install essentials
        run: |
          aws --version

          # install LightsailCTL Plugin (https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-install-software)
          sudo apt-get update && sudo apt-get -y install curl jq
          curl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl -o /usr/local/bin/lightsailctl
          chmod +x /usr/local/bin/lightsailctl
      - name: Release to Amazon Lightsail
        env:
          CONTAINER_SERVICE_NAME: container-service-1
        run: |
          echo "Releasing to Amazon Lightsail"

          docker info
          echo ${{ secrets.DOCKER_TOKEN }} | docker login --username=${{ env.DOCKER_USERNAME }} --password-stdin
          echo pulling image ${{ steps.build-service.outputs.image }}
          docker pull ${{ needs.build-service.outputs.image }}

          # upload the docker image for this pipeline
          aws lightsail push-container-image \
            --service-name $CONTAINER_SERVICE_NAME  \
            --label ${{ env.SERVICE_NAME }}-latest  \
            --image ${{ needs.build-service.outputs.image }}

          # get uploaded image (its different every time)
          IMAGE_TAG=$(aws lightsail get-container-images --service $CONTAINER_SERVICE_NAME | jq -r .containerImages[0].image)

          # create a deployment with uploaded docker image
          aws lightsail create-container-service-deployment \
            --service-name $CONTAINER_SERVICE_NAME \
            --containers "{
              \"$CONTAINER_SERVICE_NAME\": {
                \"image\": \"$IMAGE_TAG\",
                \"ports\": {
                  \"80\": \"HTTP\"
                }
              }
            }" \
            --public-endpoint "{
              \"containerName\": \"$CONTAINER_SERVICE_NAME\",
              \"containerPort\": 80,
              \"healthCheck\": {
                \"path\": \"/healthcheck\",
                \"intervalSeconds\": 10
              }
            }"
