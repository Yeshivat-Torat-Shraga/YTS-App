# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  # desc "upload beta"
  # lane :beta do
  #   build_app(scheme: "Yeshivat Torat Shraga")
  #   upload
  # end

  # desc "upload release"
  # lane :upload do
  #   upload_to_testflight(username: "benjitusk1@gmail.com", skip_waiting_for_build_processing: true)
  # end

  desc "Set the Xcode version to be used"
  lane :set_xcode_version do
    xcversion(version: "13.3.1")
  end

  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      # The api key can be found in the App Store Connect API UI
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY"],
      in_house: false # detecting this via ASC private key not currently supported
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
    #fetch read your app identifier defined in your Appfile
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    current_version = get_version_number(
      target: "Yeshivat Torat Shraga" # replace with your main target, required if you have more than one non-test target
    )
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )
    increment_build_number(
      build_number: (latest_build_number.to_f + 1),
    )
  end

  desc "Run produce methods"
  lane :produce_profiles do
    app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    # If this lane fails due to authentication issues,
    # try resetting the FASTLANE_SESSION environment
    # variable via the following command:
    # bundle exec fastlane spaceauth
    produce(
      app_identifier: app_id,
      app_name: "Yeshivat Torat Shraga",
      skip_itc: true,
      enable_services: {
        "associated_domains": "on",
        "app_group": "on",
        "app_attest": "on",
        "push_notification": "on",
      }
    )
    produce(
      app_identifier: app_id + ".NotificationService",
      app_name: "Yeshivat Torat Shraga Notification Service",
      skip_itc: true,
      enable_services: {
        "app_group": "on",
      }
    )
  end
 
  desc "Check certs and profiles"
  lane :prepare_signing do |options|
    app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
 
    # profile_name = "App Provisioning Profile" # replace with the name of your existing profile, or define a name for the profile that fastlane will create if it's not found

    create_keychain(
        name: "actiontest_keychain",
        password: "meow",
        default_keychain: false,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
    )

    if not is_ci
      produce_profiles
    end

    match(
      type: "appstore",
      api_key: api_key,
      app_identifier: [app_id, app_id + ".NotificationService"],
      # MATCH_GIT_BASIC_AUTHORIZATION should be formatted as follows:
      # plaintext_username:plaintext_auth_token
      git_basic_authorization: Base64.strict_encode64(ENV["MATCH_GIT_BASIC_AUTHORIZATION"]),
      keychain_name: "actiontest_keychain",
      keychain_password: "meow",
    )
  end
 
  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    # app_profile_name = "match AppStore " + app_identifier
    # profile_name = "App Provisioning Profile" # the name of the profile to use for the build
    output_name = "YTS" # specify the name of the .ipa file to generate
    export_method = "app-store" # specify the export method
    compile_bitcode = true # specify whether to enable bitcode
 
    # turn off automatic signing during build so correct code signing identity is guaranteed to be used
    update_code_signing_settings(
      use_automatic_signing: false,
      targets: ["Yeshivat Torat Shraga", "NotificationModifier"], # specify which targets to update code signing settings for
      code_sign_identity: "Apple Distribution", # replace with name of code signing identity if different
      # bundle_identifier: app_identifier,
      build_configurations: ["Release"] # only toggle code signing settings for Release configurations
    )

    settings_to_override = {
      # :BUNDLE_IDENTIFIER => "com.reesedevelopment.YTS", # Might need to be removed
      # :PROVISIONING_PROFILE_SPECIFIER => app_profile_name,
      # Use BUILDCACHE override compiler paths to ensure that the correct compiler paths are used.
      :CC => "clang",
      :CPLUSPLUS => "clang++",
      :LD => "clang",
      :LDPLUSPLUS => "clang++",
    }

 
    # build the app
    gym(
      scheme: "Yeshivat Torat Shraga", # replace with name of your project's scheme
      output_name: output_name,
      configuration: "Release",
      xcargs: settings_to_override,
      silent: true,
      export_options: {
        method: export_method,
        compileBitcode: compile_bitcode
      }
    )
  end
 
  desc "Upload to TestFlight / ASC"
  lane :upload_release do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    deliver(
        api_key: api_key,
        skip_screenshots: true,
        skip_metadata: true,
        skip_app_version_update: true,
        force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
        run_precheck_before_submit: false # not supported through ASC API yet
    )
  end

  desc "Build and upload to TestFlight"
  lane :build_upload_testflight do
    # set_xcode_version
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_release
    upload_release
  end

end
