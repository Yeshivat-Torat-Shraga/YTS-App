# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# def delete_temp_keychain(name)
#   delete_keychain(
#     name: name
#   ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
# end

# def create_temp_keychain(name, password)
#   create_keychain(
#     name: name,
#     password: password,
#     unlock: false,
#     timeout: 0
#   )
# end

# def ensure_temp_keychain(name, password)
#   delete_temp_keychain(name)
#   create_temp_keychain(name, password)
# end

platform :ios do
#   lane :load_asc_api_key do

lane :release do
  
      if is_ci
        api_key = app_store_connect_api_key(
          issuer_id: ENV["ASC_ISSUER_ID"],
          key_content: ENV["ASC_KEY"],
          key_id: ENV["ASC_KEY_ID"],
        )
      else
        api_key = app_store_connect_api_key(
          issuer_id: ENV["ASC_ISSUER_ID"],
          key_filepath: "~/Downloads/asc-key.p8",
          key_id: ENV["ASC_KEY_ID"],
        )
      end
#     keychain_name = TEMP_KEYCHAIN_USER
#     keychain_password = TEMP_KEYCHAIN_PASSWORD
#     ensure_temp_keychain(keychain_name, keychain_password)
    
#     desc "Load ASC API Key information to use in subsequent lanes"
#     api_key = app_store_connect_api_key(
#         issuer_id: ENV["ASC_ISSUER_ID"],
#         key_content: ENV["ASC_KEY"],
#         key_id: ENV["ASC_KEY_ID"],
#         is_key_content_base64: true,
# #         duration: 1200,            
# #         in_house: false
#     )
    
    desc "Push a new release build to the App Store"
    
    increment_build_number(xcodeproj: "Yeshivat Torat Shraga.xcodeproj")
#     match(type: "appstore", app_identifier: "com.reesedevelopment.YTS.NotificationService")
#     match(type: "appstore", app_identifier: "com.reesedevelopment.YTS")
    
    match(
      type: 'appstore',
      app_identifier: "com.reesedevelopment.YTS.NotificationService",
      api_key: api_key,
      git_basic_authorization: Base64.strict_encode64("benjitusk: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")
    )
    
    match(
      type: 'appstore',
      app_identifier: "com.reesedevelopment.YTS",
      api_key: api_key,
      git_basic_authorization: Base64.strict_encode64("benjitusk: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")
    )
    
    target_to_profile_mapping = {
      "Yeshivat Torat Shraga" => "match AppStore com.reesedevelopment.YTS",
      "NotificationModifier" => "match AppStore com.reesedevelopment.YTS.NotificationService",
    }

    target_to_profile_mapping.each do |target, profile_name|
      update_code_signing_settings(
        targets: [target],
        build_configurations: ["Release"],
        profile_name: profile_name,
      )
    end

    gym(
      configuration: "Release",
      scheme: "Yeshivat Torat Shraga",
      export_method: "app-store",
       export_options: {
        provisioningProfiles: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
        signing_style: "manual",
      },
      skip_profile_detection: true,
    )
    
#     gym(
#       configuration: "Release",
#       workspace: "your_project_workspace.xcworkspace",
#       scheme: "your_schema",
#       export_method: "app-store",
#       export_options: {
#         provisioningProfiles: { 
#             DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
#         }
#       }
#     )
    
    upload_to_app_store
  end
end
